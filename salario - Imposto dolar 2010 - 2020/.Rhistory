a <- 1
a
a
a
a
a
class (a)
b <- "rabada"
class(b)
vetor1 <- (1,2,3,4)
vetor1 <- c(1,2,3,4)
class(vetor1)
vetor1
vetor2 <- c("a","b","c")
vetor2
vetor2 <- c(1,1,1,1 )
vetor1 + vetor2
vetor3 <- vetor1 + vetor2
vetor3
x< 0:4
x <- 0:4
x
class(x)
x<-as.character(x)
x
class(x)
x<-as.numeric(x)
x
class(x)
x
class(x)
m <- matrix(1:6, nrwo=2,ncol=3)
m
m <- matrix(1:6, nrow = =2,ncol=3)
m <- matrix(1:6, nrow = 2,ncol=3)
m
View(m)
m[,3]
m <- matrix(31:60, 6, 5)
s <- matrix(31:60, 6, 5)
m <- matrix(1:6, nrow = 2,ncol=3)
s
View(s)
P <- 31:60
Q <- matrix(P, 6, 5)
Q
seq(P)
seq(Q)
P <- seq(from = 31, to = 60, by = 1)
Q <- matrix(P, 6, 5)
Q
x <- list(1:5, "Z", TRUE, c("a", "b"))
x
View(x)
data.frame(alunos- c("João", "Maria","Jose"), notas =c(9,8,7))
data.frame(alunos= c("João", "Maria","Jose"), notas =c(9,8,7))
meu_primeiro_data_frame <- data.frame(alunos= c("João", "Maria","Jose"), notas =c(9,8,7))
meu_primeiro_data_frame
View(meu_primeiro_data_frame)
View(meu_primeiro_data_frame)
help("rnorm")
x1 <- 0:99
x2 <- 0:99
x3 <- 0:99
t= dara.frame(Soma <- x1, x1+x2, x1+x2+x3 )
t= dara.frame(Soma = c(x1, x1+x2, x1+x2+x3 ))
t= dara.frame(Soma = c(x1, x1+x2, x1+x2+x3 ))
t= data.frame(Soma = c(x1, x1+x2, x1+x2+x3 ))
View(t)
t= data.frame(Soma = c(x1, x1+x2, x1+x2+x3 ))
View(t)
t= data.frame(a = x1, b= x1+x2, c=x1+x2+x3)
View(t)
x1 <- rnorm(100, mean = 10)
x2 <- rnorm(100, mean = 10)
x3 <- rnorm(100, mean = 10)
t= data.frame(a = x1, b= x1+x2, c=x1+x2+x3)
View(t)
((2020-2017)/(2020-1996))*100
(1+sqrt(5))/2
1/0
-1/0
0/0
x<- 2
if(if==2){
Sys.time()
}
x<- 2
if(if==2){
Sys.time()
}
x<- 2
if(if == 2){
Sys.time()
}
x<- 2
if(if == 2){
Sys.time()
}
if(if == 1){
Sys.time()
}
if(x == 1){
Sys.time()
}
x<- 2
if(x == 1){
Sys.time()
}
if(x == 2){
Sys.time()
}
x<-3
if (x<0) {
sinal<-"negativo"
} else if (x==0) {
sinal<-"neutro"
} else if (x>0) {
sinal<-"positivo"
}
x<-0
if (x<0) {
sinal<-"negativo"
} else if (x==0) {
sinal<-"neutro"
} else if (x>0) {
sinal<-"positivo"
}
source('~/.active-rstudio-document')
if (x<0) {
sinal<-"negativo"
} else if (x==0) {
sinal<-"neutro"
} else if (x>0) {
sinal<-"positivo"
}
x<-1:10
soma<-0
x<-1:10
soma<-0
for (i in 1:10) {
soma<-soma+x[i]
}
soma
x<-1:50
soma<-0
for (i in seq(1,50,2)) {
soma<-soma+x[i]
}
soma
x<-1:100
for (i in 1:100) {
if(x<5 | x>90){
a<-x*10
} else if (x>5 & x<90) {
a<-x*0,1
}
}
x<-1:100
for (i in 1:100) {
if(x<5 | x>90){
a<-x*10
} else if (x>5 && x<90) {
a<-x*0,1
}
}
x<-1:100
for (i in 1:100) {
if(x[i]<5 | x[i]>90){
a<-x*10
} else if (x[i] >5 && x[i]<90) {
a<-x*0,1
}
}
x<-1:100
for (i in 1:100) {
if(x[i]<5 | x[i]>90){
a<-x*10
} else if (x[i] >5 & x[i]<90) {
a<-x*0,1
}
}
x<-1:100
for (i in 1:100) {
if(x[i]<5 | x[i]>90){
x[i]<-x[i] *10
} else  {
x[i]<-x[i] *0,1
}
}
x<-1:100
for (i in 1:100) {
if(x[i]<5 | x[i]>90){
x[i]<-x[i] *10
} else  {
x[i]<-x[i] *0.1
}
}
x
fun1 = function(numero,ocorrencia){
w=numero^2
return(ocorrencia+w)
}
fun1(numero = 5, ocorrencia = 1000)
n<-100
x<-1:n
y<- 5+2*x+rnorm(n,sd==30)
y<- 5+2*x+rnorm(n,sd=30)
plot(x,y)
n<-100
cores<-1:n
formas<- 5+2*x+rnorm(n,sd=30)
plot(cores,formas)
n<-100
cores<-1:n
formas<- 5+2*x+rnorm(n,sd=30)
plot(cores,formas)
n<-100
cores<-1:n
formas<- 5+2*x+rnorm(n,sd=30)
plot(cores,formas)
data(quakes)
data(quakes)
tabela<-table(quakes$mag)
View(quakes)
plot(tabela)
x<-4
TRUE
x<-4
if (x=4) {
TRUE
}
x<-4
if (x+=4) {
TRUE
}
x<-4
if (x==4) {
TRUE
}
x<-1
x<-1
if(is.numeric(x)){
"número"
} else if (is.character(x)) {
"palavra"
} else {
NULL
}
install.packages("installr")
install.packages("rmarkdown")
install.packages("rmarkdown")
install.packages("Tinflex")
install.packages("knitr")
install.packages("knitr")
install.packages("htmltools")
install.packages("C:/Users/victo/AppData/Local/Temp/RtmpIxh3z9/downloaded_packages/bslib_0.3.1.tar.gz", repos = NULL, type = "source")
install.packages("C:/Users/victo/AppData/Local/Temp/RtmpIxh3z9/downloaded_packages/rmarkdown_2.14.tar.gz", repos = NULL, type = "source")
install.packages("C:/Users/victo/AppData/Local/Temp/RtmpIxh3z9/downloaded_packages/htmltools_0.5.1.1.zip", repos = NULL, type = "win.binary")
install.packages("C:/Users/victo/AppData/Local/Temp/RtmpIxh3z9/downloaded_packages/knitr_1.38.tar.gz", repos = NULL, type = "source")
install.packages("installr")
install.packages("xfun")
install.packages("C:/Users/victo/AppData/Local/Temp/RtmpIxh3z9/downloaded_packages/knitr_1.38.tar.gz", repos = NULL, type = "source")
install.packages(c("htmltools", "xfun"))
install.packages("rmarkdown")
install.packages(c("digest", "fs", "glue", "htmltools", "jsonlite", "magrittr", "mime", "rlang", "sass", "stringi", "Tinflex", "xfun", "yaml"))
install.packages("rmarkdown")
install.packages("xfun")
remove.packages("htmltools", lib="~/R/win-library/3.6")
install.packages("xfun")
install.packages("htmltools")
install.packages("htmltools")
install.packages("xfun")
update.packages(xfun)
update.packages(ask = FALSE)
library(htmltools)
update.packages(checkBuilt=TRUE, ask=FALSE)
install.packages("xfun")
library(xfun)
detach("package:xfun", unload = TRUE)
library(xfun)
detach("package:xfun", unload = TRUE)
library(xfun)
remove.packages("xfun", lib="~/R/win-library/3.6")
install.packages("xfun")
install.packages("stringr")
install.packages("readxl")
install.packages("skimr")
df <- read.csv("cities_average_net_salary_after_tax.19-10-2021.csv")
setwd("C:/Users/victo/OneDrive/Meus Bagulhos/python/Base de dados/salario - Imposto dolar 2010 - 2020")
df <- read.csv("cities_average_net_salary_after_tax.19-10-2021.csv")
skim(df)
library(skimr)
skim(df)
df <- read.csv("cities_average_net_salary_after_tax.19-10-2021.csv")
df <- read.csv("cities_average_net_salary_after_tax.19-10-2021.csv")
skim(df)
View(df)
df <- read.csv("cities_average_net_salary_after_tax.19-10-2021.csv",sep=";")
View(df)
skim(df)
skim(df)
data("mtcars")
data(mtcars)
force(mtcars)
View(mtcars)
hist(mtcars$hp)
qqnorm(mtcars$hp)
qqline(mtcars$hp)
table(mtcars$hp)
hist(mtcars$gear)
hist(mtcars$mpg)
table(mtcars$gear)
barplot(table(mtcars$gear))
cut(mtcars$mpg,5)
cut(mtcars$mpg,seq(10))
cut(mtcars$mpg,5)
barplot(cut(mtcars$mpg,5))
table(barplot(cut(mtcars$mpg,5)))
table(cut(mtcars$mpg,5))
cut(mtcars$mpg,5)
table(cut(mtcars$mpg,5))
barplot(table(cut(mtcars$mpg,5)))
barplot(table(cut(mtcars$mpg, seq(10,34,5))))
barplot(table(cut(mtcars$mpg, seq(10,35,5))))
install.packages("ggplot2")
install.packages("tidyverse")
